
Data Structure:

users
  name  

user_origins
  user_id
  address
  lat
  long

user_destinations
  user_id
  address
  lat
  long

trips
  user_id
  station_id
  origin
  destination

user_trips

stations
  address
  lat
  long

stations_status
  station_id
  avail_docks
  total_docks
  avail_bikes


Sample data:
  
  from http://citibikenyc.com/stations/json
  { "id"=>72, 
    "stationName"=>"W 52 St & 11 Ave", 
    "availableDocks"=>30, 
    "totalDocks"=>39, 
    "latitude"=>40.76727216, 
    "longitude"=>-73.99392888, 
    "statusValue"=>"In Service", 
    "statusKey"=>1, 
    "availableBikes"=>8, 
    "stAddress1"=>"W 52 St & 11 Ave", 
    "stAddress2"=>"", 
    "city"=>"", 
    "postalCode"=>"", 
    "location"=>"", 
    "altitude"=>"", 
    "testStation"=>false, 
    "lastCommunicationTime"=>nil, 
    "landMark"=>""} 

  from http://api.citybik.es/citibikenyc.json
  { "name"=>"W 52 St & 11 Ave",
    "idx"=>0,
    "timestamp"=>"2013-11-19T02:34:27.903015",
    "number"=>72,
    "free"=>33,
    "bikes"=>5,
    "coordinates"=>"",
    "address"=>"W 52 St & 11 Ave",
    "lat"=>40767272,
    "lng"=>-73993928,
    "id"=>0}



User path:

User index page/form
  insert origin address
  insert destination address
  insert trip length in minutes (15,30,45)

Post request to users_controller
  pass origin address to geocoder
  pass destination address to geocoder

Show page
  nearest station to their location
  estimate of available bike at current location
  nearesr station to their destination
  estimate of available slot at destination


Source code 

for geolocation with Geocoder

class Location < ActiveRecord::Base
  attr_accessible :address, :latitiude, :longitude
  geocded_by :address
  after_validation :geocode, :if => :address_changed?
end


Other gems 

google maps for rails






